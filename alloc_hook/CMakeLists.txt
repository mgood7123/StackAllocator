cmake_minimum_required(VERSION 3.4.1)

project(ALLOC_HOOK)

set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)

option(ALLOC_HOOK_OVERRIDE          "Override the standard malloc interface (e.g. define entry points for malloc() etc)" ON)
option(ALLOC_HOOK_OSX_INTERPOSE     "Use interpose to override standard malloc on macOS" ON)
option(ALLOC_HOOK_OSX_ZONE          "Use malloc zone to override standard malloc on macOS" ON)
option(ALLOC_HOOK_WIN_REDIRECT      "Use redirection module ('mimalloc-redirect') on Windows if compiling mimalloc as a DLL" ON)
option(ALLOC_HOOK_LOCAL_DYNAMIC_TLS "Use slightly slower, dlopen-compatible TLS mechanism (Unix)" OFF)

include(CheckIncludeFiles)

if(NOT COMMAND testBuilder_build)
    add_subdirectory(testBuilder)
    testBuilder_set_current_working_directory_to_default_binary_directory()
endif()

message(STATUS "CMAKE_C_COMPILER = ${CMAKE_C_COMPILER}")
message(STATUS "CMAKE_CXX_COMPILER = ${CMAKE_CXX_COMPILER}")
message(STATUS "CMAKE_C_COMPILER_ID = ${CMAKE_C_COMPILER_ID}")
message(STATUS "CMAKE_CXX_COMPILER_ID = ${CMAKE_CXX_COMPILER_ID}")

if(ALLOC_HOOK_OVERRIDE)
  message(STATUS "Override standard malloc (ALLOC_HOOK_OVERRIDE=ON)")
  if(APPLE)
    if(ALLOC_HOOK_OSX_ZONE)
      # use zone's on macOS
      message(STATUS "  Use malloc zone to override malloc (ALLOC_HOOK_OSX_ZONE=ON)")
      testBuilder_add_compile_source(AllocHook_C src/alloc_hook_prim_osx_override_zone.c)
      testBuilder_add_compile_option(AllocHook_C "SHELL:-D ALLOC_HOOK_OSX_ZONE=1")
      if (NOT ALLOC_HOOK_OSX_INTERPOSE)
        message(STATUS "  WARNING: zone overriding usually also needs interpose (use -DALLOC_HOOK_OSX_INTERPOSE=ON)")
      endif()
    endif()
    if(ALLOC_HOOK_OSX_INTERPOSE)
      # use interpose on macOS
      message(STATUS "  Use interpose to override malloc (ALLOC_HOOK_OSX_INTERPOSE=ON)")
      testBuilder_add_compile_option(AllocHook_C "SHELL:-D ALLOC_HOOK_OSX_INTERPOSE=1")
      if (NOT ALLOC_HOOK_OSX_ZONE)
        message(STATUS "  WARNING: interpose usually also needs zone overriding (use -DALLOC_HOOK_OSX_INTERPOSE=ON)")
      endif()
    endif()
    if(ALLOC_HOOK_USE_CXX AND ALLOC_HOOK_OSX_INTERPOSE)
      message(STATUS "  WARNING: if dynamically overriding malloc/free, it is more reliable to build mimalloc as C code (use -DALLOC_HOOK_USE_CXX=OFF)")
    endif()
  endif()
endif()

testBuilder_add_compile_option(AllocHook_C "SHELL:-D ALLOC_HOOK_SHOW_ERRORS=1")
testBuilder_add_compile_option(AllocHook_C "SHELL:-D ALLOC_HOOK_SHARED_LIB=1")
testBuilder_add_compile_option(AllocHook_C "SHELL:-D ALLOC_HOOK_SHARED_LIB_EXPORT=1")
testBuilder_add_compile_option(AllocHook_C "SHELL:-D ALLOC_HOOK_DEBUG=3")
testBuilder_add_compile_option(AllocHook_C "SHELL:-D ALLOC_HOOK_SECURE=4")

if (MSVC AND MSVC_VERSION GREATER_EQUAL 1914)
    testBuilder_add_compile_option(AllocHook_C "SHELL:/Zc:__cplusplus")
endif()

if(CMAKE_C_COMPILER_ID MATCHES "AppleClang|Clang|GNU|Intel" AND NOT CMAKE_SYSTEM_NAME MATCHES "Haiku")
  if(ALLOC_HOOK_LOCAL_DYNAALLOC_HOOKC_TLS)
    testBuilder_add_compile_option(AllocHook_C "SHELL:-ftls-model=local-dynamic")
  else()
    testBuilder_add_compile_option(AllocHook_C "SHELL:-ftls-model=initial-exec")
  endif()
  if(ALLOC_HOOK_OVERRIDE)
    testBuilder_add_compile_option(AllocHook_C "SHELL:-fno-builtin-malloc")
  endif()
endif()

if(CMAKE_C_COMPILER_ID MATCHES "AppleClang|Clang|GNU")
# if NOT USE CXX
    if(false)
        testBuilder_add_compile_option(AllocHook_C "SHELL:-Wstrict-prototypes")
    endif()
    if(CMAKE_C_COMPILER_ID MATCHES "AppleClang|Clang")
        testBuilder_add_compile_option(AllocHook_C "SHELL:-Wpedantic -Wno-static-in-inline")
    endif()
endif()

if(CMAKE_C_COMPILER_ID MATCHES "AppleClang|Clang|GNU")
    testBuilder_add_compile_option(AllocHook_C "SHELL:-Wall -Wextra -Wno-unknown-pragmas -fvisibility=hidden")
# if NOT USE CXX
    if(false)
        testBuilder_add_compile_option(AllocHook_C "SHELL:-Wstrict-prototypes")
    endif()
    if(CMAKE_C_COMPILER_ID MATCHES "AppleClang|Clang")
        testBuilder_add_compile_option(AllocHook_C "SHELL:-Wpedantic -Wno-static-in-inline")
    endif()
endif()

if(CMAKE_C_COMPILER_ID MATCHES "Intel")
    testBuilder_add_compile_option(AllocHook_C "SHELL:-Wall -fvisibility=hidden")
endif()

# extra needed libraries
if(WIN32)
    testBuilder_add_library(AllocHook_C psapi)
    testBuilder_add_library(AllocHook_C shell32)
    testBuilder_add_library(AllocHook_C user32)
    testBuilder_add_library(AllocHook_C advapi32)
    testBuilder_add_library(AllocHook_C bcrypt)
else()
  set(pc_libraries "")
  find_library(ALLOC_HOOK_LIBPTHREAD pthread)
  if (ALLOC_HOOK_LIBPTHREAD)
    testBuilder_add_library(AllocHook_C pthread)
  endif()
  find_library(ALLOC_HOOK_LIBRT rt)
  if(ALLOC_HOOK_LIBRT)
    testBuilder_add_library(AllocHook_C rt)
  endif()
  find_library(ALLOC_HOOK_LIBATOALLOC_HOOKC atomic)
  if (ALLOC_HOOK_LIBATOALLOC_HOOKC)
    testBuilder_add_library(AllocHook_C atomic)
  endif()
endif()

# -----------------------------------------------------------------------------
# Set override properties
# -----------------------------------------------------------------------------
if (ALLOC_HOOK_OVERRIDE)
    testBuilder_add_compile_option(AllocHook_C "SHELL:-D ALLOC_HOOK_MALLOC_OVERRIDE=1")
endif()

testBuilder_add_include(AllocHook_C include)
testBuilder_add_source(AllocHook_C src/alloc_hook_alloc.c)
testBuilder_add_source(AllocHook_C src/alloc_hook_alloc_aligned.c)
testBuilder_add_source(AllocHook_C src/alloc_hook_alloc_posix.c)
testBuilder_add_source(AllocHook_C src/alloc_hook_arena.c)
testBuilder_add_source(AllocHook_C src/alloc_hook_bitmap.c)
testBuilder_add_source(AllocHook_C src/alloc_hook_heap.c)
testBuilder_add_source(AllocHook_C src/alloc_hook_os.c)
testBuilder_add_source(AllocHook_C src/alloc_hook_init.c)
testBuilder_add_source(AllocHook_C src/alloc_hook_options.c)
testBuilder_add_source(AllocHook_C src/alloc_hook_prim.c)
testBuilder_add_source(AllocHook_C src/alloc_hook_page.c)
testBuilder_add_source(AllocHook_C src/alloc_hook_random.c)
testBuilder_add_source(AllocHook_C src/alloc_hook_segment.c)
testBuilder_add_source(AllocHook_C src/alloc_hook_segment_map.c)
testBuilder_add_source(AllocHook_C src/alloc_hook_stats.c)
testBuilder_build_shared_library(AllocHook_C)

testBuilder_add_include(AllocHook_Null_C include)
testBuilder_add_library(AllocHook_Null_C AllocHook_C)
testBuilder_add_source(AllocHook_Null_C src/null_c.c)
testBuilder_build(AllocHook_Null_C EXECUTABLES)

if (false)

testBuilder_add_include(AllocHookOverride include)
testBuilder_add_library(AllocHookOverride AllocHook)
testBuilder_add_source(AllocHookOverride src/hook_override.cpp)
testBuilder_build_shared_library(AllocHookOverride)

testBuilder_add_include(StackAllocatorL include)
testBuilder_add_source(StackAllocatorL src/empty.cpp)
testBuilder_add_source(StackAllocatorL src/log.cpp)
testBuilder_add_compile_option(StackAllocatorL "SHELL:-D SA_STACK_ALLOCATOR__LOGGING=1")
testBuilder_build_shared_library(StackAllocatorL)

testBuilder_add_include(StackAllocatorOverride include)
testBuilder_add_source(StackAllocatorOverride src/empty.cpp)
testBuilder_add_library(StackAllocatorOverride StackAllocator)
testBuilder_add_compile_option(StackAllocatorOverride "SHELL:-D SA_STACK_ALLOCATOR__SA_OVERRIDE_NEW=1")
testBuilder_build_shared_library(StackAllocatorOverride)

testBuilder_add_include(StackAllocatorOverrideL include)
testBuilder_add_source(StackAllocatorOverrideL src/empty.cpp)
testBuilder_add_library(StackAllocatorOverrideL StackAllocatorL)
testBuilder_add_compile_option(StackAllocatorOverrideL "SHELL:-D SA_STACK_ALLOCATOR__SA_OVERRIDE_NEW=1")
testBuilder_build_shared_library(StackAllocatorOverrideL)

testBuilder_add_source(stack_exe src/executable.cpp)
testBuilder_add_library(stack_exe StackAllocatorOverride)
testBuilder_build(stack_exe EXECUTABLES)

endif()